//! Concrete bootloader construction and flash bank layout for the nrf52840

use super::{
    autogenerated,
    autogenerated::memory_map::{EXTERNAL_BANKS, MCU_BANKS},
};
use crate::{
    devices::bootloader::Bootloader,
    error::{self, Error},
};
use blue_hal::{
    drivers::nrf52840::flash::{self, NrfFlash as Flash},
    hal::null::{NullError, NullFlash, NullSerial, NullSystick},
    nrf52840pac,
};

use super::update_signal::NullUpdateSignal;
#[cfg(not(feature = "ecdsa-verify"))]
use crate::devices::image::CrcImageReader as ImageReader;
#[cfg(feature = "ecdsa-verify")]
use crate::devices::image::EcdsaImageReader as ImageReader;

impl Bootloader<NullFlash, Flash, NullSerial, NullSystick, ImageReader, NullUpdateSignal> {
    pub fn new() -> Self {
        let mut peripherals = nrf52840pac::Peripherals::take().unwrap();
        let mcu_flash = flash::NrfFlash::new(peripherals.NVMC);
        Bootloader {
            mcu_flash,
            external_banks: &EXTERNAL_BANKS,
            mcu_banks: &MCU_BANKS,
            external_flash: None,
            serial: None,
            boot_metrics: Default::default(),
            start_time: None,
            recovery_enabled: false,
            greeting: autogenerated::LOADSTONE_GREETING,
            _marker: Default::default(),
            update_signal: None,
        }
    }
}

impl error::Convertible for flash::Error {
    fn into(self) -> Error {
        match self {
            flash::Error::MemoryNotReachable => {
                Error::DriverError("[MCU Flash] Memory not reachable")
            }
            flash::Error::MisalignedAccess => {
                Error::DriverError("[MCU Flash] Misaligned memory access")
            }
        }
    }
}

impl error::Convertible for NullError {
    fn into(self) -> Error { panic!("This error should never happen!") }
}
